// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "license": {
            "name": "All Rights Reserved."
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/comment/create": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Creates a new comment for the given thread",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "comment"
                ],
                "summary": "Handles comment creation requests",
                "parameters": [
                    {
                        "description": "Comment data",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/comments.CreateCommentRequestJson"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/tutorial.Comment"
                        }
                    },
                    "400": {
                        "description": "Invalid data"
                    },
                    "401": {
                        "description": "Invalid JWT token"
                    },
                    "405": {
                        "description": "Method not allowed"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/comment/{id}": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Updates a comment",
                "tags": [
                    "comment"
                ],
                "summary": "Handles comment update requests",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Comment UUID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Comment data",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/comments.CommentUpdateRequestJson"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Invalid data"
                    },
                    "401": {
                        "description": "Invalid JWT token"
                    },
                    "403": {
                        "description": "No permission to update comment"
                    },
                    "405": {
                        "description": "Method not allowed"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Deletes a comment",
                "tags": [
                    "comment"
                ],
                "summary": "Handles comment deletion requests",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Comment UUID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "401": {
                        "description": "Invalid JWT token"
                    },
                    "403": {
                        "description": "No permission to delete comment"
                    },
                    "405": {
                        "description": "Method not allowed"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/thread/create": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Creates a new thread",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "thread"
                ],
                "summary": "Handles thread creation requests",
                "parameters": [
                    {
                        "description": "Thread data",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/threads.CreateThreadRequestJson"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/tutorial.GetThreadDetailsRow"
                        }
                    },
                    "400": {
                        "description": "Invalid data"
                    },
                    "401": {
                        "description": "Invalid JWT token"
                    },
                    "405": {
                        "description": "Method not allowed"
                    },
                    "413": {
                        "description": "Input too large"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/thread/search": {
            "get": {
                "description": "Retrieves threads matching the given query",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "thread"
                ],
                "summary": "Handles thread search requests",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search query",
                        "name": "q",
                        "in": "query",
                        "required": true
                    },
                    {
                        "enum": [
                            "created_time_asc",
                            "created_time_desc",
                            "num_comments_asc",
                            "num_comments_desc"
                        ],
                        "type": "string",
                        "description": "Sorting order, default 'created_time_desc'",
                        "name": "order",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Page number, default '1'",
                        "name": "p",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/threads.SearchThreadResponse"
                        }
                    },
                    "405": {
                        "description": "Method not allowed"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/thread/{id}": {
            "get": {
                "description": "Retrieves the thread with the given ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "thread"
                ],
                "summary": "Handles thread retrieval requests",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Thread ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/tutorial.Thread"
                        }
                    },
                    "404": {
                        "description": "Thread not found"
                    },
                    "405": {
                        "description": "Method not allowed"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Updates a thread",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "thread"
                ],
                "summary": "Handles thread update requests",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Thread UUID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Thread data",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/threads.ThreadUpdateRequestJson"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Invalid data"
                    },
                    "401": {
                        "description": "Invalid JWT token"
                    },
                    "403": {
                        "description": "No permission to update thread"
                    },
                    "405": {
                        "description": "Method not allowed"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Deletes the thread with the given ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "thread"
                ],
                "summary": "Handles thread deletion requests",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Thread ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "401": {
                        "description": "Invalid JWT token"
                    },
                    "403": {
                        "description": "No permission to delete thread"
                    },
                    "405": {
                        "description": "Method not allowed"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/thread/{thread_id}/comments": {
            "get": {
                "description": "Retrieves comments for the given thread",
                "tags": [
                    "comment"
                ],
                "summary": "Handles comment retrieval requests",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Thread UUID",
                        "name": "thread_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "enum": [
                            "created_time_asc",
                            "created_time_desc"
                        ],
                        "type": "string",
                        "description": "Sorting order, default 'created_time_asc'",
                        "name": "order",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Page number, default '1'",
                        "name": "p",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/comments.GetCommentResponse"
                        }
                    },
                    "405": {
                        "description": "Method not allowed"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/user/create": {
            "post": {
                "description": "Registers a new user with the given username and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Handles registration requests",
                "parameters": [
                    {
                        "description": "Username and password",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.AuthRequestJson"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.AuthResponseJson"
                        }
                    },
                    "400": {
                        "description": "Incorrect username/password"
                    },
                    "405": {
                        "description": "Method not allowed"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/user/login": {
            "post": {
                "description": "Logs in a user with the given username and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Handles login requests",
                "parameters": [
                    {
                        "description": "Username and password",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.AuthRequestJson"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.AuthResponseJson"
                        }
                    },
                    "400": {
                        "description": "Invalid data"
                    },
                    "401": {
                        "description": "Incorrect username/password"
                    },
                    "405": {
                        "description": "Method not allowed"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        }
    },
    "definitions": {
        "comments.CommentUpdateRequestJson": {
            "type": "object",
            "properties": {
                "body": {
                    "type": "string"
                }
            }
        },
        "comments.CreateCommentRequestJson": {
            "type": "object",
            "properties": {
                "body": {
                    "type": "string"
                },
                "thread_id": {
                    "type": "string"
                }
            }
        },
        "comments.GetCommentResponse": {
            "type": "object",
            "properties": {
                "comments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/tutorial.Comment"
                    }
                },
                "count": {
                    "type": "integer"
                }
            }
        },
        "models.AuthRequestJson": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "models.AuthResponseJson": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "pgtype.InfinityModifier": {
            "type": "integer",
            "enum": [
                1,
                0,
                -1
            ],
            "x-enum-varnames": [
                "Infinity",
                "Finite",
                "NegativeInfinity"
            ]
        },
        "pgtype.Timestamptz": {
            "type": "object",
            "properties": {
                "infinityModifier": {
                    "$ref": "#/definitions/pgtype.InfinityModifier"
                },
                "time": {
                    "type": "string"
                },
                "valid": {
                    "type": "boolean"
                }
            }
        },
        "threads.CreateThreadRequestJson": {
            "type": "object",
            "properties": {
                "body": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "threads.SearchThreadResponse": {
            "type": "object",
            "properties": {
                "threads": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/tutorial.GetThreadsByCriteriaRow"
                    }
                },
                "total_threads": {
                    "type": "integer"
                }
            }
        },
        "threads.ThreadUpdateRequestJson": {
            "type": "object",
            "properties": {
                "body": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "tutorial.Comment": {
            "type": "object",
            "properties": {
                "body": {
                    "type": "string"
                },
                "created_time": {
                    "$ref": "#/definitions/pgtype.Timestamptz"
                },
                "creator": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "thread_id": {
                    "type": "string"
                },
                "updated_time": {
                    "$ref": "#/definitions/pgtype.Timestamptz"
                }
            }
        },
        "tutorial.GetThreadDetailsRow": {
            "type": "object",
            "properties": {
                "body": {
                    "type": "string"
                },
                "created_time": {
                    "$ref": "#/definitions/pgtype.Timestamptz"
                },
                "creator": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "num_comments": {
                    "type": "integer"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "title": {
                    "type": "string"
                },
                "updated_time": {
                    "$ref": "#/definitions/pgtype.Timestamptz"
                }
            }
        },
        "tutorial.GetThreadsByCriteriaRow": {
            "type": "object",
            "properties": {
                "body": {
                    "type": "string"
                },
                "created_time": {
                    "$ref": "#/definitions/pgtype.Timestamptz"
                },
                "creator": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "num_comments": {
                    "type": "integer"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "title": {
                    "type": "string"
                },
                "updated_time": {
                    "$ref": "#/definitions/pgtype.Timestamptz"
                }
            }
        },
        "tutorial.Thread": {
            "type": "object",
            "properties": {
                "body": {
                    "type": "string"
                },
                "created_time": {
                    "$ref": "#/definitions/pgtype.Timestamptz"
                },
                "creator": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "num_comments": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                },
                "updated_time": {
                    "$ref": "#/definitions/pgtype.Timestamptz"
                }
            }
        }
    },
    "securityDefinitions": {
        "Bearer": {
            "description": "The word \"Bearer\", followed by a space, and then the JWT token.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:9090",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "CVWO Forum Backend API",
	Description:      "This is the backend API for the forum.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
